<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<title>Three.js - Примеры</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="../../1.css">
<script type="text/javascript" src="../../1.js"></script>
</head>
<body>

<h3>EffectComposer</h3>
<div class=note_trans><b>Примечание переводчика:</b> EffectComposer в переводе на русский язык будет - составитель (компоновщик) эффектов.</div>
Используется в <em>three.js</em> для реализации эффектов постобработки. Данный класс управляет цепочкой проходов постобработки для получения определенного окончательного результата визуализации.
Проходы постобработки (пассы - от pass - проход, переход) выполняются в порядке их добавления / вставки (addition / insertion). Последний проход автоматически отображается на экране.
<div class=note_trans><b>Примечание переводчика:</b> Более подробно <a href="https://threejsfundamentals.org/threejs/lessons/threejs-post-processing.html" target="_blank">о постобработке в <em>three.js</em></a> (правда на английском). Вот перевод части этой статьи <a class='link' onclick='javascript:spoiler(this)'>... читать далее</a>
<div style='display:none;'>Постобработка (постпроцессинг) обычно сводится к применению какого-либо эффекта или фильтра для двумерного изображения. В случае с <em>three.js</em> у нас уже имеется сцена с группой сеток (mesh) на ней.
Эта сцена отображается как двумерное изображение.
Обычно эта картинка визуализируется непосредственно на <tt>canvas</tt> и отображается в браузере, но здесь вместо этого можно передать её в целевой буфер визуализации и, прежде чем нарисовать на <tt>canvas</tt>,
применить к ней несколько эффектов, уже после получения сцены-картинки, т.е. после обработки, но до показа её на экране.<br>
Это и называется постобработка (или постпроцессинг), потому что происходит после (post - после) обработки основной сцены.<br>
Примерами постобработки являются фильтры в Instagram, фильтры Photoshop и т.д...<br>
В <em>three.js</em> имеется несколько примеров классов, помогающих установить конвейер постобработки. Вот как он работает, вначале создается <a href="#" onmouseover="show('EffectComposer')" onmouseout="hide()">EffectComposer</a> и к нему добавляется несколько объектов Pass.
Затем вызывается метод <a href="#render" onmouseover="show('render - воспроизвести, отобразить')" onmouseout="hide()"><tt>EffectComposer.render</tt></a>,
который передает нашу сцену в целевой буфер визуализации, а затем применяет к ней каждый Pass (проход).<br>
Каждый проход может представлять собой некоторый эффект постобработки, такой как <a href="https://ru.wikipedia.org/wiki/%D0%92%D0%B8%D0%BD%D1%8C%D0%B5%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" target="_blank">добавление виньетки</a> (vignette),
размытие (blurring), применение эффекта <a href="https://ru.wikipedia.org/wiki/Bloom" target="_blank">свечение</a> (<a href="https://en.wikipedia.org/wiki/Bloom_(shader_effect)" target="_blank">bloom</a>),
применение <a href="https://ru.wikipedia.org/wiki/%D0%97%D0%B5%D1%80%D0%BD%D0%B8%D1%81%D1%82%D0%BE%D1%81%D1%82%D1%8C_(%D1%84%D0%BE%D1%82%D0%BE%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D1%8F)" target="_blank">зернистости</a> (<a href="https://en.wikipedia.org/wiki/Film_grain" target="_blank">film grain</a>),
регулировка оттенка (hue), насыщенности (saturation), контрастности (contrast) и т.д... и наконец, на холсте отображается результат.<br>
Вот ещё важный кусочек для понимания функционирования EffectComposer'а.
Он создает два буфера целевой визуализации. Давайте назовем их <tt class="lnk" onmouseover="show('<tt>rtA</tt> - сокращ. англ. слов render target A -<br>целевой буфер визуализации по имени A')" onmouseout="hide()">rtA</tt> и <tt class="lnk" onmouseover="show('<tt>rtB</tt> - сокращ. англ. слов render target B -<br>целевой буфер визуализации по имени B')" onmouseout="hide()">rtB</tt>.<br>
Затем вызываем метод <a href="#addPass" onmouseover="show('add pass - добавить проход')" onmouseout="hide()"><tt>EffectComposer.addPass</tt></a> для добавления каждого прохода в том порядке, в котором нужно их применить. Затем проходы применяются примерно так:<br>
<img src="../../img/postprocessing.png" width="600" style="margin:0% calc(50% - 300px);"><br>
Вначале сцена, переданная в <tt>RenderPass</tt>, оказывается в <tt>rtA</tt>, затем <tt>rtA</tt> передается к следующему проходу, каким бы он не был.
Этот проход использует <tt>rtA</tt> в качестве входных данных для выполнения каких-либо действий и записывает полученный результат в <tt>rtB</tt>.
Далее, <tt>rtB</tt> передается следующему проходу, который использует <tt>rtB</tt> в качестве входных данных и записывает результат своих действий обратно в <tt>rtA</tt>.
Все это продолжается до завершения всех проходов.<br>

Каждый проход имеет четыре основные опции:
<div class=list><tt class="lnk" onmouseover="show('enabled - включен')" onmouseout="hide()">enabled</tt> - будет использоваться данный проход или нет</div>
<div class=list><tt class="lnk" onmouseover="show('needs swap - нужна замена')" onmouseout="hide()">needsSwap</tt> - будут ли меняться местами <tt>rtA</tt> и <tt>rtB</tt> по завершении данного прохода или нет</div>
<div class=list><tt class="lnk" onmouseover="show('clear - очистка')" onmouseout="hide()">clear</tt> - будет ли выполняться очистка перед выполнением данного прохода или нет</div>
<div class=list><tt class="lnk" onmouseover="show('render to screen - отобразить на экране')" onmouseout="hide()">renderToScreen</tt> - следует ли выдавать визуализацию сцены на <tt>canvas</tt> (а значит и на экран) вместо назначенного на данный момент целевого буфера визуализации.
Обычно значение <tt>true</tt> устанавливается на последнем проходе, добавленном в EffectComposer.</div></div></div><br>

<h4>Примеры</h4>
<pre><a href="https://threejs.org/examples/#webgl_postprocessing" target="_blank">postprocessing</a>
<a href="https://threejs.org/examples/#webgl_postprocessing_advanced" target="_blank">postprocessing advanced</a>
<a href="https://threejs.org/examples/webgl_postprocessing_backgrounds.html" target="_blank">postprocessing backgrounds</a>
<a href="https://threejs.org/examples/webgl_postprocessing_crossfade.html" target="_blank">postprocessing crossfade</a>
<a href="https://threejs.org/examples/webgl_postprocessing_dof.html" target="_blank">postprocessing depth-of-field</a>
<a href="https://threejs.org/examples/webgl_postprocessing_dof2.html" target="_blank">postprocessing depth-of-field 2</a>
<a href="https://threejs.org/examples/webgl_postprocessing_fxaa.html" target="_blank">postprocessing fxaa</a>
<a href="https://threejs.org/examples/webgl_postprocessing_glitch.html" target="_blank">postprocessing glitch</a>
<a href="https://threejs.org/examples/webgl_postprocessing_godrays.html" target="_blank">postprocessing godrays</a>
<a href="https://threejs.org/examples/webgl_postprocessing_masking.html" target="_blank">postprocessing masking</a>
<a href="https://threejs.org/examples/webgl_postprocessing_nodes_pass.html" target="_blank">postprocessing node material</a>
<a href="https://threejs.org/examples/webgl_postprocessing_outline.html" target="_blank">postprocessing outline</a>
<a href="https://threejs.org/examples/webgl_postprocessing_pixel.html" target="_blank">postprocessing pixelate</a>
<a href="https://threejs.org/examples/webgl_postprocessing_procedural.html" target="_blank">postprocessing procedural</a>
<a href="https://threejs.org/examples/webgl_postprocessing_rgb_halftone.html" target="_blank">postprocessing rgb halftone</a>
<a href="https://threejs.org/examples/webgl_postprocessing_sao.html" target="_blank">postprocessing sao</a>
<a href="https://threejs.org/examples/webgl_postprocessing_smaa.html" target="_blank">postprocessing smaa</a>
<a href="https://threejs.org/examples/webgl_postprocessing_sobel.html" target="_blank">postprocessing sobel</a>
<a href="https://threejs.org/examples/webgl_postprocessing_ssaa.html" target="_blank">postprocessing ssaa</a>
<a href="https://threejs.org/examples/webgl_postprocessing_ssao.html" target="_blank">postprocessing ssao</a>
<a href="https://threejs.org/examples/webgl_postprocessing_taa.html" target="_blank">postprocessing taa</a>
<a href="https://threejs.org/examples/webgl_postprocessing_unreal_bloom.html" target="_blank">postprocessing unreal bloom</a>
<a href="https://threejs.org/examples/webgl_postprocessing_unreal_bloom_selective.html" target="_blank">postprocessing unreal bloom selective</a></pre><br>

<h4>Конструктор</h4>
<pre>EffectComposer( <a href="../../renderers/webGLRenderer.htm" onmouseover="show('WebGLRenderer<br>renderer - визуализатор (средство визуализации), рендерер')" onmouseout="hide()">renderer</a>, <a href="../../renderers/webGLRenderTarget.htm" onmouseover="show('WebGLRenderTarget<br>render target - целевой (буфер) визуализации')" onmouseout="hide()">renderTarget</a> )</pre>
<div class=list><tt>renderer</tt> -- визуализатор (рендерер), используемый для отображения сцены.</div>
<div class=list><tt>renderTarget</tt> -- предварительно задаваемый, целевой буфер визуализации, используемый EffectComposer внутренне. Дополнительный, необязательный параметр.</div><br>

<h4>Свойства</h4>
<div class=blockindent><br>
<pre id="passes"><span onclick="showClick(type_array)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('passes - проходы')" onmouseout="hide()">.passes</a></span></pre>
Массив, представляющий упорядоченную цепочку проходов постобработки.<br><br>

<pre id="readBuffer"><a href="../../renderers/webGLRenderTarget.htm" onmouseover="show('WebGLRenderTarget<br>read buffer - буфер чтения')" onmouseout="hide()">.readBuffer</a></pre>
Ссылка на внутренний буфер чтения. Как правило, проходы (<tt>passes</tt>) считывают из этого буфера результат предыдущей визуализации (рендеринга).<br><br>

<pre id="renderer"><a href="../../renderers/webGLRenderer.htm" onmouseover="show('WebGLRenderer<br>renderer - визуализатор (средство визуализации), рендерер')" onmouseout="hide()">.renderer</a></pre>
Ссылка на внутренний визуализатор (рендерер).<br><br>

<pre id="renderToScreen"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('render to screen - отображать на экране')" onmouseout="hide()">.renderToScreen</a></span></pre>
Свойство определяет, будет ли отображаться на экране (буфер кадра (framebuffer) по умолчанию) последний проход постобработки или нет.<br><br>

<pre id="writeBuffer"><a href="../../renderers/webGLRenderTarget.htm" onmouseover="show('WebGLRenderTarget<br>write buffer - буфер записи')" onmouseout="hide()">.writeBuffer</a></pre>
Ссылка на внутренний буфер записи. Как правило, проходы (<tt>passes</tt>) записывают свой результат в этот буфер.</div><br>

<h4>Методы</h4>
<div class=blockindent><br>
<pre id="addPass"><span onclick="showClick(type_void)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('add pass - добавить проход')" onmouseout="hide()">.addPass</a></span>( <span onclick="showClick('значением должен быть Pass - проход постобработки')"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('pass - проход, переход')" onmouseout="hide()">pass</a></span> )</pre>
<div class=list><tt>pass</tt> -- проход постобработки, добавляемый в цепочку проходов.</div>
Метод добавляет заданный переход в цепочку проходов.<br><br>

<pre id="insertPass"><span onclick="showClick(type_void)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('insert pass - вставить проход (постобработки)')" onmouseout="hide()">.insertPass</a></span>( <span onclick="showClick('значением должен быть Pass - проход постобработки')"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('pass - проход, переход')" onmouseout="hide()">pass</a></span>, <span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('index - индекс, порядковый номер')" onmouseout="hide()">index</a></span> )</pre>
<div class=list><tt>pass</tt> -- проход постобработки, вставляемый в цепочку проходов.</div>
<div class=list><tt>index</tt> -- этот параметр определяет позицию в цепочке проходов, на которую должен быть вставлен указанный проход.</div>
Метод вставляет заданный проход в цепочку проходов по заданному индексу.<br><br>

<pre id="isLastEnabledPass"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('is last enabled pass - является последним включенным проходом')" onmouseout="hide()">.isLastEnabledPass</a></span>( <span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('pass index - индекс прохода')" onmouseout="hide()">passIndex</a></span> )</pre>
<div class=list><tt>passIndex</tt> -- проверяемый проход постобработки.</div>
Метод возвращает значение <tt>true</tt>, если проход постобработки по указанному индексу является последним включенным проходом в цепочке проходов.
Используется EffectComposer'ом для определения того, когда переход постобработки должен быть отображен на экране.<br><br>

<pre id="render"><span onclick="showClick(type_void)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('render - воспроизвести, отобразить')" onmouseout="hide()">.render</a></span>( <span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('delta time - дельта времени')" onmouseout="hide()">deltaTime</a></span> )</pre>
<div class=list><tt>deltaTime</tt> -- значение промежутка времени.</div>
Метод выполняет все включенные проходы постобработки по порядку для получения конечного кадра.<br><br>

<pre id="reset"><span onclick="showClick(type_void)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('reset - сбросить, обнулить')" onmouseout="hide()">.reset</a></span>( <a href="../../renderers/webGLRenderTarget.htm" onmouseover="show('WebGLRenderTarget<br>render target - целевой (буфер) визуализации')" onmouseout="hide()">renderTarget</a> )</pre>
<div class=list><tt>renderTarget</tt> -- предварительно заданный, целевой буфер визуализации, используемый EffectComposer'ом внутренне. Дополнительный, необязательный параметр.</div>
Сбрасывает внутреннее состояние EffectComposer'а.<br><br>

<pre id="setPixelRatio"><span onclick="showClick(type_void)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('set pixel ratio - установить соотношение пикселей')" onmouseout="hide()">.setPixelRatio</a></span>( <span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('pixel ratio - соотношение пикселей')" onmouseout="hide()">pixelRatio</a></span> )</pre>
<div class=list><tt>pixelRatio</tt> -- соотношение пикселей устройства.</div>
Метод устанавливает соотношение пикселей устройства. Обычно он используется для <span class="lnk" onmouseover="show('Мониторы с HiDPI (от англ. слов High Dots Per Inch<br>- высокое разрешение в точках на дюйм), также<br>известные под торговым названием &quot;Retina Display&quot;<br>от компании Apple, это мониторы с экранами высокого<br>разрешения в относительно небольшом формате.<br>В основном они используются в ноутбуках и планшетах<br>высокого класса.<br>В режиме с высоким разрешением не всякое программное<br>обеспечение ведет себя правильно.')" onmouseout="hide()">HiDPI</span> устройства для предотвращения размытия выводимого результата.
Таким образом, семантика данного метода аналогична методу <a href="../../renderers/webGLRenderer.htm#setPixelRatio" onmouseover="show('WebGLRenderer.setPixelRatio')" onmouseout="hide()">WebGLRenderer.setPixelRatio()</a>.<br><br>

<pre id="setSize"><span onclick="showClick(type_void)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('set size - установить размер')" onmouseout="hide()">.setSize</a></span>( <span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('width - ширина')" onmouseout="hide()">width</a></span>, <span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('height - высота')" onmouseout="hide()">height</a></span> )</pre>
<div class=list><tt>width</tt> -- ширина EffectComposer'а.</div>
<div class=list><tt>height</tt> -- высота EffectComposer'а.</div>
Метод изменяет размеры внутренних буферов визуализации и проходов на указанные <tt>width</tt> и <tt>height</tt> с учетом соотношения пикселей устройства.
Таким образом, семантика данного метода аналогична методу <a href="../../renderers/webGLRenderer.htm#setSize" onmouseover="show('WebGLRenderer.setSize')" onmouseout="hide()">WebGLRenderer.setSize()</a>.<br><br>

<pre id="swapBuffers"><span onclick="showClick(type_void)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('swap buffers - обмен буферов')" onmouseout="hide()">.swapBuffers()</a></span></pre>
Метод меняет местами внутренние буферы чтения/записи.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/postprocessing/EffectComposer.js" target="_blank">EffectComposer.js на github.com</a></div><br><br>

<br><br>
</body></html>