<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<title>Three.js</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="../1.css">
<script type="text/javascript" src="../1.js"></script>
</head>
<body>

<h2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Как удалять объекты</h2>
Одной из важных сторон повышения производительности и предотвращения утечек памяти в приложении является избавление от неиспользуемых библиотечных объектов.
Всякий раз, при создании экземпляра объекта от библиотеки <em>three.js</em>, выделяется определенный объем памяти.
Впрочем, <em>three.js</em> создает для определенных объектов, таких как геометрические элементы или материалы, связанные с WebGL объекты, такие как буферы или шейдерные программы, необходимые для визуализации (рендеринга).
Важно подчеркнуть, что эти объекты не высвобождаются автоматически.
Вместо этого, для высвобождения таких ресурсов, приложение должно использовать специальный API. Данное руководство представляет краткий обзор того, как этот API используется и какие объекты актуальны в этой ситуации.<br><br>

<h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Геометрические элементы</h3>
Геометрический элемент обычно представляет сведения о вершинах, определяемые как набор атрибутов.
<em>three.js</em> внутри, для каждого атрибута, создает объект типа <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer" target="_blank" onmouseover="show('Интерфейс WebGLBuffer является частью WebGL API и представляет<br>непрозрачный буферный объект, хранящий такие данные, как вершины<br>или цвета. Объект WebGLBuffer не определяет своих собственных<br>методов или свойств и его содержимое не доступно напрямую.')" onmouseout="hide()">WebGLBuffer</a>.
Эти объекты удаляются только вызовом метода <tt><a href="../core/bufferGeometry.htm#dispose" onmouseover="show('BufferGeometry.dispose()')" onmouseout="hide()">BufferGeometry.dispose()</a></tt>.
Если в приложении стал ненужным геометрический элемент, выполните данный метод, чтобы высвободить все, связанные с ним, ресурсы.<br><br>

<h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Материалы</h3>
Материал определяет способ отображения объектов. <em>three.js</em> использует сведения из описания материала для создания шейдерной программы для визуализации (рендеринга).
Шейдерные программы могут быть удалены только при удалении соответствующего материала. Из соображений производительности, <em>three.js</em> пытается по возможности повторно использовать существующие программы шейдеров.
Поэтому шейдерная программа удаляется только в том случае, если удаляются все связанные с ней материалы. Можно затребовать удаление материала с помощью метода <tt><a href="../materials/material.htm#dispose" onmouseover="show('Material.dispose()')" onmouseout="hide()">Material.dispose()</a></tt>.<br><br>

<h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Текстуры</h3>
Удаление материала не влияет на текстуры. Они обрабатываются отдельно, поскольку одна и та же текстура может одновременно использоваться несколькими материалами.
Всякий раз, при создании экземпляра <a href="../textures/texture.htm" onmouseover="show('Texture')" onmouseout="hide()">Texture</a>,
<em>three.js</em> внутри создает экземпляр <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture" target="_blank" onmouseover="show('Интерфейс WebGLTexture является частью API WebGL и представляет<br>собой непрозрачный объект текстуры, обеспечивающий хранение и<br>строение операций текстурирования.<br>Объект WebGLTexture не определяет своих собственных методов или<br>свойств и его содержимое не доступно напрямую.')" onmouseout="hide()">WebGLTexture</a>.
Подобно буферам, такой объект может быть удален только путем вызова метода <tt><a href="../textures/texture.htm#dispose" onmouseover="show('Texture.dispose()')" onmouseout="hide()">Texture.dispose()</a></tt>.<br><br>

<h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Целевые буферы визуализации</h3>
Для реализации пользовательских назначений рендеринга, объекты типа <a href="../renderers/webGLRenderTarget.htm" onmouseover="show('WebGLRenderTarget')" onmouseout="hide()">WebGLRenderTarget</a>
выделяют не только экземпляр <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture" target="_blank" onmouseover="show('Интерфейс WebGLTexture является частью API WebGL и представляет<br>собой непрозрачный объект текстуры, обеспечивающий хранение и<br>строение операций текстурирования.<br>Объект WebGLTexture не определяет своих собственных методов или<br>свойств и его содержимое не доступно напрямую.')" onmouseout="hide()">WebGLTexture</a>,
но также и буферы <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer" target="_blank" onmouseover="show('Интерфейс WebGLFramebuffer является частью API WebGL и представляет<br>собой набор буферов, которые служат в качестве места назначения<br>визуализации (рендеринга).<br>Объект WebGLFramebuffer не определяет своих собственных методов или<br>свойств и его содержимое не доступно напрямую.')" onmouseout="hide()">WebGLFramebuffer</a>
и <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer" target="_blank" onmouseover="show('Интерфейс WebGLRenderbuffer является частью API WebGL и представляет<br>собой буфер, который может содержать изображение или может быть<br>источником или целью операции визуализации (рендеринга).<br>Объект WebGLRenderbuffer не определяет своих собственных методов или<br>свойств и его содержимое не доступно напрямую.')" onmouseout="hide()">WebGLRenderbuffer</a>.
Эти объекты высвобождаются только при выполнении метода <tt><a href="../renderers/webGLRenderTarget.htm#dispose" onmouseover="show('WebGLRenderTarget.dispose()')" onmouseout="hide()">WebGLRenderTarget.dispose()</a></tt>.<br><br>

<h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Сцены</h3>
Для сцен визуализатор (рендерер) поддерживает специальные структуры данных для сортировки и визуализации.
Если, по каким-либо причинам, в приложении становится устаревшим объект сцены, то для высвобождения этих ресурсов вызывается метод <tt><a href="../scenes/scene.htm#dispose" onmouseover="show('Scene.dispose')" onmouseout="hide()">Scene.dispose()</a></tt>.<br><br>

<h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Прочие объекты</h3>
Существуют и другие классы из каталого примеров, вроде элементов управления (контролов) или каналов постобработки, предоставляющих методы <tt>dispose()</tt> для удаления внутренних прослушивателей событий или целевых буферов визуализации.
В общем, рекомендуется проверять API или документацию класса и отслеживать метод <tt>dispose()</tt>. Если он присутствует, следует использовать его при очистке.<br><br>

<h3>ЧАсто задаваемые ВОпросы</h3>
<h4>Почему <em>three.js</em> не может удалять объекты автоматически?</h4>
<div class=list>Этот вопрос задавался сообществом много раз, поэтому важно четко его разъяснить. По факту, <em>three.js</em> не знает времени жизни или области действия сущностей, созданных пользователем, таких как геометрические элементы или материалы.
Все это - зона ответственности приложения. Например, если даже материал в настоящий момент не используется в визуализации, он может стать необходимым в следующем кадре.
Поэтому, если приложение решает, что некий объект может быть удален, оно должно уведомить движок посредством вызова соответствующего метода <tt>dispose()</tt>.</div><br>

<h4>Удаляются ли при удалении сетки (mesh) со сцены, её геометрические элементы и материал?</h4>
<div class=list>Нет, следует явным образом удалять геометрические элементы и материал с помощью метода <tt>dispose()</tt>.
Имейте в виду, что геометрические элементы и материалы могут быть общими для таких трехмерных объектов, как сетки (mesh).</div><br>

<h4>Предоставляет ли <em>three.js</em> сведения о количестве кэшированных объектов?</h4>
<div class=list>Да. Это возможно при анализе <tt><a href="../renderers/webGLRenderer.htm#info" onmouseover="show('WebGLRenderer.info')" onmouseout="hide()">WebGLRenderer.info</a></tt>,
специального свойства визуализатора (рендерера) с целым рядом статической информации о памяти видеокарты и процессе визуализации.
Среди прочего, там говорится о количестве, сохраняемых внутри, текстур, геометрических элементов и шейдерных программ.
Если замечаете проблемы с производительностью в приложении, рекомендуется отладить это свойство для упрощения определения утечки памяти.<br>
Внутренние ресурсы для текстуры выделяются, только если изображение полностью загружено. Если вы удаляете текстуру до загрузки изображения, ничего не произойдет. Нет выделенных ресурсов, нет и необходимости в очистке.</div><br>

<h4>Что произойдет при вызове метода <tt>dispose()</tt> на текстуру, если изображение еще не загружено?</h4>
<div class=list>Внутренние ресурсы для текстуры выделяются, только если изображение полностью загружено. Если вы удаляете текстуру до загрузки изображения, ничего не произойдет. Нет выделенных ресурсов, нет и необходимости в очистке.</div><br>

<h4>Что произойдет, если вызвать метод <tt>dispose()</tt>, а затем использовать соответствующий объект на более позднем этапе?</h4>
<div class=list>Удаленные внутренние ресурсы будут вновь созданы движком. Так что, никакой ошибки во время выполнения не произойдет, но возможно будет заметно негативное влияние на производительность в текущем кадре, особенно при компиляции шейдерных программ.</div><br>

<h4>Как управлять объектами <em>three.js</em> в моем приложении? Как узнать, что можно их удалять?</h4>
<div class=list>В общем, конкретных рекомендаций для этого нет. Это сильно зависит от каждого конкретного случая использования, когда уместен вызов <tt>dispose()</tt>. Важно подчеркнуть, что не всегда и все время нужно удалять объекты.
Хороший пример показать это - игра, состоящая из нескольких уровней. Прекрасный момент для удаления объектов - переключение уровня. Приложение может пройти сквозь старую сцену и избавиться от всех устаревших материалов, геометрических элементов и текстур.
Как упоминалось в предыдущем вопросе, ошибка во время выполнения не происходит, если вы удаляете объект, который фактически все еще используется. Худшее, что может произойти, это падение производительности одиночного кадра.</div><br>

<h4>Примеры, демонстрирующие использование метода <tt>dispose()</tt></h4>
<pre><a href="https://threejs.org/examples/webgl_test_memory" target="_blank">WebGL / test / memory</a>
<a href="https://threejs.org/examples/webgl_test_memory2" target="_blank">WebGL / test / memory2</a></pre><br><br>

<br><br>
</body>
</html>
