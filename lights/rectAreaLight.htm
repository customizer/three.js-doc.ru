<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<title>Three.js</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="../1.css">
<script type="text/javascript" src="../1.js"></script>
</head>
<body>

<span class="right_side"><a href="../core/object3D.htm" title="Переход к родительскому классу: Object3D"><tt>Object3D &rarr;</tt></a>&nbsp;&nbsp;<a href="light.htm" title="Переход к родительскому классу: Light"><tt>Light &rarr;</tt></a></span>
<h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="lnk" onmouseover="show('сокращ. от англ. слов rectangular area light - свет прямоугольной области');" onmouseout="hide()">RectAreaLight</span></h3>
Этот свет излучается равномерно всей стороной прямоугольной плоскости. Он может быть использован для симуляции таких вещей как светящееся окно или освещение лентой (полосой).
<div class=note><b>Примечание:</b> этот класс в настоящее время находится в активной разработке и пока ещё не готов к полноценному использованию (начиная с версии r83). Вернитесь сюда через месяц или два! И в тоже время не стесняйтесь попробовать его в работе.</div><br>

<h4>Пример</h4>
<pre>var width = 2;
var height = 10;
var rectLight = new THREE.RectAreaLight( 0xffffff, undefined,  width, height );
rectLight.intensity = 70.0;
rectLight.position.set( 5, 5, 0 );
scene.add( rectLight )<br>
rectLightHelper = new THREE.RectAreaLightHelper( rectLight );
scene.add( rectLightHelper );</pre>
<h5>Другие примеры:</h5>
<pre><a href="https://threejs.org/examples/#webgl_lights_rectarealight" target="_blank">lights / rectarealight</a></pre><br>

<h4>Конструктор</h4>
<pre>RectAreaLight( <span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('color - цвет');" onmouseout="hide()">color</a></span>, <span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('intensity - интенсивность, яркость');" onmouseout="hide()">intensity</a></span>, <span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('width - ширина');" onmouseout="hide()">width</a></span>, <span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('height - высота');" onmouseout="hide()">height</a></span> )</pre>
<div class=list><tt><span onclick="showClick(type_int)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('color - цвет');" onmouseout="hide()">color</a></span></tt> — шестнадцатиричное значение цвета освещения, по умолчанию <tt>0xffffff</tt> (белый). Дополнительный, необязательный аргумент.</div>
<div class=list><tt><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('intensity - интенсивность, яркость');" onmouseout="hide()">intensity</a></span></tt> — числовое значение силы/интенсивности света. Значение по умолчанию равно <tt>1</tt>. Дополнительный, необязательный аргумент.</div>
<div class=list><tt><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('width - ширина');" onmouseout="hide()">width</a></span></tt> - ширина источника света. Значение по умолчанию равно <tt>10</tt>. Дополнительный, необязательный аргумент.</div>
<div class=list><tt><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('height - высота');" onmouseout="hide()">height</a></span></tt> - высота источника света. Значение по умолчанию равно <tt>10</tt>. Дополнительный, необязательный аргумент.</div>
Создает новый RectAreaLight.<br><br>

<h4>Свойства</h4>
Смотрите базовый класс <a href="../core/object3D.htm" onmouseover="show('Light');" onmouseout="hide()"><tt>Light</tt></a> для общих свойств.
<div class=blockindent><br>
<pre id="castShadow"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('cast shadow - отбрасывать тень');" onmouseout="hide()">castShadow</a></span></pre>
<!-- Если задано значение true, то данный тип освещения будет отбрасывать динамические тени.
<div class=warning><b>Предупреждение:</b>  Это затратно по ресурсам и для правильного отображения теней требуется подстройка. Подробнее смотрите в описании <a href="#6.1" onmouseover="show('RectAreaLightShadow');" onmouseout="hide()">RectAreaLightShadow</a>.</div>
Значением по умолчанию является <tt>false</tt>. -->
<div class=note><b>Примечание:</b> это свойство для этого типа освещения пока ещё не реализовано! (версия three.js r83).</div><br>

<pre id="decay"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('decay - распад');" onmouseout="hide()">.decay</a></span></pre>
Значение, на которое уменьшается интенсивность света с увеличением расстояния от источника.<br>
В режиме, <a href="../renderers/webGLRenderer.htm#physicallyCorrectLights" onmouseover="show('WebGLRenderer.physicallyCorrectLights');" onmouseout="hide()">правильном с точки зрения физики</a>, <tt>decay = 2</tt> приводит к физически реалистичному уменьшению освещенности.
Значение по умолчанию равно <tt>1</tt>.
<div class=note><b>Примечание:</b> это свойство для этого типа освещения пока ещё не реализовано! (версия three.js r83).</div><br>

<pre id="distance"><span onclick="showClick(type_float)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('distance - расстояние');" onmouseout="hide()">.distance</a></span></pre>
При ненулевом значении свет будет уменьшаться линейно от максимальной интенсивности (в расположении источника света) до нуля (на расстоянии от источника света, задаваемым данным свойством).
Значение по умолчанию равно <tt>0.0</tt>.
<div class=note><b>Примечание:</b> это свойство для этого типа освещения пока ещё не реализовано! (версия three.js r83).</div><br>

<pre id="isRectAreaLight"><span onclick="showClick(type_bool)"><a href="#" onclick="return false" onblur="hideClick()" onmouseover="show('is rectangular area light - является<br>освещением от прямоугольной области');" onmouseout="hide()">.isRectAreaLight</a></span></pre>
Свойство используется для проверки, является ли данный класс и производные от него классы RectAreaLight. Значением по умолчанию является <tt>true</tt>.<br>
Его нельзя изменять, так как оно используется внутри <em>three.js</em> для оптимизации.<br><br>

<pre id="position"><a href="../math/vector3.htm" onmouseover="show('Vector3.<br>position - позиция, положение');" onmouseout="hide()">.position</a></pre>
Это свойство устанавливается равным <tt><a href="../core/object3D.htm#DefaultUp" onmouseover="show('Object3D.DefaultUp');" onmouseout="hide()">Object3D.DefaultUp</a> (0, 1, 0)</tt>, так что свет светит сверху вниз.<br><br>

<!-- <pre id="6shadow"><a href="#6.1" onmouseover="show('RectAreaLightShadow.<br>shadow - тень');" onmouseout="hide()">.shadow</a></pre>
Для расчета теней от этого освещения используется <a href="#6.1" onmouseover="show('RectAreaLightShadow');" onmouseout="hide()">RectAreaLightShadow</a>.
<div class=note><b>Примечание:</b> это свойство для этого типа освещения пока ещё не реализовано! (версия three.js r83).</div><br> -->

<pre id="target"><a href="../core/object3D.htm" onmouseover="show('Object3D.<br>target - цель, назначение');" onmouseout="hide()">.target</a></pre>
Свет RectAreaLight направлен из своего местоположения (свойство <tt><a href="#position" onmouseover="show('RectAreaLight.position');" onmouseout="hide()">position</a></tt>) в целевую позицию, определяемую данным свойством.
По умолчанию <tt>target</tt> будет равен <tt>(0, 0, 0)</tt>.

<div class=note><b>Примечание:</b> чтобы изменить целевую позицию на что-либо другое кроме положения по умолчанию, её нужно добавить к <a href="../scenes/scene.htm" onmouseover="show('Scene');" onmouseout="hide()">сцене</a> при помощи
<pre>scene.add( light.target );</pre>
Это делается для того, чтобы <tt><a href="../core/object3D.htm#matrixWorld" onmouseover="show('Object3D.matrixWorld');" onmouseout="hide()">matrixWorld</a></tt> целевой позиции автоматически обновлялся с каждым кадром.<br>
Также возможно установить целью другой объект на сцене (любой объект со свойством <tt><a href="../core/object3D.htm#position" onmouseover="show('Object3D.position');" onmouseout="hide()">position</a></tt>), вот так:
<pre>var targetObject = new THREE.Object3D();
scene.add(targetObject);<br>
light.target = targetObject;</pre>
Теперь RectAreaLight будет отслеживать целевой объект.</div></div><br>

<h4>Методы</h4>
Смотрите базовый класс <a href="../core/object3D.htm" onmouseover="show('Light');" onmouseout="hide()"><tt>Light</tt></a> для общих методов.
<div class=blockindent><br>
<pre id="copy"><a href="#" onmouseover="show('RectAreaLight.<br>copy - копировать');" onmouseout="hide()">.copy</a>( <a href="#" onmouseover="show('RectAreaLight.<br>source - исходник');" onmouseout="hide()">source</a> )</pre>
Метод копирует значения всех свойств из <tt><a href="#" onmouseover="show('RectAreaLight.<br>source - исходник');" onmouseout="hide()">source</a></tt> в данный RectAreaLight.</div><br>

<h4>Исходники</h4>
<div class=blockindent><a href="https://github.com/mrdoob/three.js/blob/master/src/lights/RectAreaLight.js" target="_blank">RectAreaLight.js на github.com</a></div><br><br>

<br><br>
</body></html>